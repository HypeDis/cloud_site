{"version":3,"sources":["components/Dashboard/Search.tsx","components/Dashboard/types.tsx","components/Dashboard/CollaboratorIcon.tsx","components/Dashboard/CollaboratorsGroup.tsx","components/Dashboard/SuggestedCard.tsx","components/Dashboard/Suggested.tsx","components/Dashboard/seedData.tsx","components/Dashboard/Dashboard.tsx","components/SideNav/NavItem.tsx","components/SideNav/NavLinks.tsx","components/SideNav/Logo.tsx","components/SideNav/ControlMenu.tsx","components/SideNav/constants.tsx","components/SideNav/Controls.tsx","components/SideNav/SideNav.tsx","components/RightPanel/RightPanel.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Search","className","href","process","type","placeholder","SuggestedView","CollaboratorIcon","imageURL","name","src","alt","CollaboratorsGroup","collaborators","maxSize","icons","range","Math","min","length","i","props","push","notShownCount","generateCollaborators","SuggestedCard","view","content","iconURL","lastAccessed","GRID","Suggested","suggestedContents","useState","setView","useEffect","console","log","onClick","LIST","map","suggestedContentsFromDB","Date","toDateString","Dashboard","NavItem","to","label","activeClassName","NavLinks","items","data","key","Logo","ControlMenu","menuRef","tipPosition","hidden","menuItems","positionCss","visibilityCss","ref","item","NavItemDataCollection","title","OptionsMenuCollection","CreateMenuCollection","Controls","optionsRef","useRef","createRef","refs","options","create","onClickHandler","btnName","curRef","current","classList","remove","add","SideNav","RightPanel","Main","from","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa0f3c16.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Search() {\n  return (\n    <div className=\"search\">\n      <div className=\"search__container\">\n        <svg className=\"search__icon\">\n          <use\n            href={process.env.PUBLIC_URL + '/img/sprites.svg#icon-search'}\n          ></use>\n        </svg>\n        <input type=\"text\" className=\"search__input\" placeholder=\"Search\" />\n      </div>\n    </div>\n  );\n}\n","export enum SuggestedView {\n  GRID,\n  LIST,\n}\nexport type SuggestedContent = {\n  name: string;\n  lastAccessed: string;\n  iconURL: string;\n  collaborators: Collaborator[];\n};\nexport type Collaborator = {\n  name: string;\n  imageURL: string;\n};\n","import React from 'react';\n\ntype CollaboratorProps = {\n  imageURL: string;\n  name: string;\n};\n\nexport default function CollaboratorIcon({\n  imageURL,\n  name,\n}: CollaboratorProps) {\n  return (\n    <div className=\"collab-icon\">\n      <img src={imageURL} alt={name} className=\"collab-img\" />\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport CollaboratorIcon from './CollaboratorIcon';\nimport { Collaborator } from './types';\n\ntype CollabGroupProps = { collaborators: Collaborator[]; maxSize: number };\n\nexport default function CollaboratorsGroup({\n  collaborators,\n  maxSize,\n}: CollabGroupProps) {\n  const generateCollaborators = (): ReactElement[] => {\n    const icons = [];\n    const range = Math.min(collaborators.length, maxSize);\n    for (let i = 0; i < range; i += 1) {\n      const props = collaborators[i];\n      icons.push(<CollaboratorIcon {...props} />);\n    }\n    if (collaborators.length > maxSize) {\n      const notShownCount = collaborators.length - maxSize;\n      icons.push(\n        <div className=\"collab-icon\">\n          <div className=\"collab-text\">+{notShownCount}</div>\n        </div>\n      );\n    }\n    return icons;\n  };\n\n  return <div className=\"collaborators\">{generateCollaborators()}</div>;\n}\n","import React from 'react';\nimport CollaboratorsGroup from './CollaboratorsGroup';\nimport { SuggestedContent, SuggestedView } from './types';\n\ntype SuggestedCardProps = {\n  view: SuggestedView;\n  content: SuggestedContent;\n};\n\nexport default function SuggestedCard({ view, content }: SuggestedCardProps) {\n  const { iconURL, name, lastAccessed, collaborators } = content;\n  return (\n    <a href={'#' + content.name} className=\"suggested__card--container\">\n      <div\n        className={`suggested__card ${\n          view === SuggestedView.GRID\n            ? 'suggested__card--grid'\n            : 'suggested__card--list'\n        }`}\n      >\n        <div className=\"options\">\n          <button className=\"options-btn\">\n            <svg className=\"options-icon\">\n              <use\n                href={\n                  process.env.PUBLIC_URL +\n                  '/img/sprites.svg#icon-dots-horizontal'\n                }\n              ></use>\n            </svg>\n          </button>\n        </div>\n        <div className=\"content-icon\">\n          <svg>\n            <use href={iconURL}></use>\n          </svg>\n        </div>\n        {/* <div className=\"collaborators\">\n          {collaborators.map(props => (\n            <CollaboratorIcon {...props} />\n          ))}\n        </div> */}\n        <CollaboratorsGroup collaborators={collaborators} maxSize={3} />\n        <div className=\"content\">\n          <p className=\"content__name\">{name}</p>\n          <p className=\"content__date\">{lastAccessed}</p>\n        </div>\n      </div>\n    </a>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { SuggestedView, SuggestedContent } from './types';\nimport SuggestedCard from './SuggestedCard';\ntype SuggestedProps = { suggestedContents: SuggestedContent[] };\n\nexport default function Suggested({ suggestedContents }: SuggestedProps) {\n  const [view, setView] = useState(SuggestedView.GRID);\n  useEffect(() => {}, [view]);\n  console.log('view changed', view);\n  return (\n    <div className=\"suggested\">\n      <div className=\"suggested__titlebar\">\n        <div className=\"suggested__title\">\n          <h2 className=\"suggested__title-text\">Suggested For You</h2>\n        </div>\n        <div className=\"suggested__view-control\">\n          <button\n            className=\"btn grid-btn\"\n            onClick={() => {\n              if (view !== SuggestedView.GRID) {\n                setView(SuggestedView.GRID);\n              }\n            }}\n          >\n            <svg className=\"btn-icon\">\n              <use\n                href={process.env.PUBLIC_URL + '/img/sprites.svg#icon-grid1'}\n              ></use>\n            </svg>\n          </button>\n          <button\n            className=\"btn list-btn\"\n            onClick={() => {\n              if (view !== SuggestedView.LIST) {\n                setView(SuggestedView.LIST);\n              }\n            }}\n          >\n            <svg className=\"btn-icon\">\n              <use\n                href={process.env.PUBLIC_URL + '/img/sprites.svg#icon-menu'}\n              ></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div\n        className={`suggested-items ${\n          view === SuggestedView.GRID\n            ? 'suggested-items-grid'\n            : 'suggested-items-list'\n        }`}\n      >\n        {suggestedContents.map(content => (\n          <SuggestedCard view={view} content={content} />\n        ))}\n      </div>\n    </div>\n  );\n}\n// TODO: populate with dummy data, have a carousel of 6-10 items\n// create type for suggested content\n// switch from card to list view\n// depending on state use the grid or list class\n","import { SuggestedContent } from './types';\n\nexport const suggestedContentsFromDB: SuggestedContent[] = [\n  {\n    iconURL: process.env.PUBLIC_URL + '/img/sprites.svg#icon-folder',\n    name: 'Hot Memes',\n    lastAccessed: new Date().toDateString(),\n    collaborators: [\n      {\n        name: 'batman',\n        imageURL: process.env.PUBLIC_URL + '/img/people/batman.png',\n      },\n    ],\n  },\n  {\n    iconURL: process.env.PUBLIC_URL + '/img/sprites.svg#icon-folder',\n    name: 'Top Secret Documents',\n    lastAccessed: new Date().toDateString(),\n    collaborators: [\n      {\n        name: 'chris',\n        imageURL: process.env.PUBLIC_URL + '/img/people/chris.jpg',\n      },\n      {\n        name: 'philip',\n        imageURL: process.env.PUBLIC_URL + '/img/people/philip.jpg',\n      },\n    ],\n  },\n  {\n    iconURL: process.env.PUBLIC_URL + '/img/sprites.svg#icon-file-word',\n    name: 'John Doe Resume.docx',\n    lastAccessed: new Date().toDateString(),\n    collaborators: [\n      {\n        name: 'robert',\n        imageURL: process.env.PUBLIC_URL + '/img/people/robert.jpg',\n      },\n    ],\n  },\n  {\n    iconURL: process.env.PUBLIC_URL + '/img/sprites.svg#icon-file-pdf',\n    name: 'World Domination Plans.pdf',\n    lastAccessed: new Date().toDateString(),\n    collaborators: [\n      {\n        name: 'jurica',\n        imageURL: process.env.PUBLIC_URL + '/img/people/jurica.jpg',\n      },\n      {\n        name: 'chris',\n        imageURL: process.env.PUBLIC_URL + '/img/people/chris.jpg',\n      },\n      {\n        name: 'robert',\n        imageURL: process.env.PUBLIC_URL + '/img/people/robert.jpg',\n      },\n      {\n        name: 'philip',\n        imageURL: process.env.PUBLIC_URL + '/img/people/philip.jpg',\n      },\n      {\n        name: 'batman',\n        imageURL: process.env.PUBLIC_URL + '/img/people/batman.png',\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport Search from './Search';\nimport Suggested from './Suggested';\nimport { suggestedContentsFromDB } from './seedData';\n\nfunction Dashboard() {\n  return (\n    <div className=\"dashboard\">\n      <Search />\n      <Suggested suggestedContents={suggestedContentsFromDB} />\n\n      <div className=\"recent\">Recent Files</div>\n      <div className=\"recent\">Shared with me</div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype NavItemProps = {\n  iconURL: string;\n  to: string;\n  label: string;\n};\nfunction NavItem({ iconURL, to, label }: NavItemProps) {\n  return (\n    <div className=\"nav-item\">\n      <NavLink\n        className=\"nav-item__link\"\n        activeClassName=\"nav-item__link--current\"\n        to={to}\n      >\n        <svg className=\"nav-item__icon\">\n          <use href={process.env.PUBLIC_URL + iconURL}></use>\n        </svg>\n        <div className=\"nav-item__label\">{label}</div>\n      </NavLink>\n    </div>\n  );\n}\n\nexport default NavItem;\n","import React from 'react';\nimport NavItem from './NavItem';\nimport { NavItemData } from './types';\n\ntype NavLinkProps = {\n  items: NavItemData[];\n};\nexport default function NavLinks({ items }: NavLinkProps) {\n  return (\n    <div className=\"nav-links-container\">\n      {items.map(data => (\n        <NavItem key={data.iconURL} {...data} />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nexport default function Logo() {\n  return (\n    <div className=\"logo-box\">\n      <Link to=\"/home\">\n        <img\n          src={process.env.PUBLIC_URL + '/img/logo-yellow.png'}\n          alt=\"cloudbae logo\"\n          className=\"logo\"\n        />\n      </Link>\n    </div>\n  );\n}\n","import React, { RefObject } from 'react';\nimport { ControlMenuAction } from './types';\n\ntype ControlMenuProps = {\n  menuRef: RefObject<HTMLDivElement>;\n  tipPosition: string;\n  name: string;\n  hidden?: boolean;\n  menuItems: ControlMenuAction[];\n};\n\nexport default function ControlMenu({\n  menuRef,\n  tipPosition,\n  name,\n  hidden,\n  menuItems,\n}: ControlMenuProps) {\n  const positionCss =\n    tipPosition === 'left'\n      ? 'sidenav__controls__menu--left'\n      : 'sidenav__controls__menu--right';\n  const visibilityCss = hidden ? 'hidden' : '';\n  return (\n    <div\n      ref={menuRef}\n      className={`sidenav__controls__menu ${positionCss} ${visibilityCss}`}\n    >\n      {/* create a MenuItem Component */}\n      <div className=\"sidenav__controls__menu-items\">\n        {menuItems.map(item => (\n          <div className=\"menu-item\">\n            <button>\n              <svg>\n                <use href={process.env.PUBLIC_URL + item.iconURL}></use>\n              </svg>\n              <div className=\"label\">{item.label}</div>\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { NavItemData, ControlMenuAction } from './types';\nexport const NavItemDataCollection: NavItemData[] = [\n  {\n    to: '/home',\n    label: 'Home',\n    iconURL: '/img/sprites.svg#icon-home3',\n    title: 'Home Icon',\n  },\n  {\n    to: '/myfiles',\n    label: 'My Files',\n    iconURL: '/img/sprites.svg#icon-folder',\n    title: 'My Files',\n  },\n  {\n    to: '/recentfiles',\n    label: 'Recent Files',\n    iconURL: '/img/sprites.svg#icon-clock',\n    title: 'Recent Files',\n  },\n  {\n    to: '/sharedfiles',\n    label: 'Shared Files',\n    iconURL: '/img/sprites.svg#icon-users',\n    title: 'Shared Files',\n  },\n  {\n    to: '/filerequests',\n    label: 'File Requests',\n    iconURL: '/img/sprites.svg#icon-folder-upload',\n    title: 'File Requests',\n  },\n  {\n    to: '/trash',\n    label: 'Trash',\n    iconURL: '/img/sprites.svg#icon-bin',\n    title: 'Trash',\n  },\n];\n\nexport const OptionsMenuCollection: ControlMenuAction[] = [\n  {\n    label: 'Upload File',\n    iconURL: '/img/sprites.svg#icon-cloud-upload',\n    title: 'Upload a File',\n  },\n  {\n    label: 'Upload Folder',\n    iconURL: '/img/sprites.svg#icon-folder-upload',\n    title: 'Upload a Folder',\n  },\n  {\n    label: 'Share File',\n    iconURL: '/img/sprites.svg#icon-share2',\n    title: 'Share a file',\n  },\n  {\n    label: 'More',\n    iconURL: '/img/sprites.svg#icon-grid1',\n    title: 'More options',\n  },\n];\nexport const CreateMenuCollection: ControlMenuAction[] = [\n  {\n    label: 'Create File',\n    iconURL: '/img/sprites.svg#icon-file-empty',\n    title: 'Create a new file',\n  },\n  {\n    label: 'Create Folder',\n    iconURL: '/img/sprites.svg#icon-folder-plus',\n    title: 'Create a new folder',\n  },\n  {\n    label: 'Create Group',\n    iconURL: '/img/sprites.svg#icon-users',\n    title: 'Create a new group',\n  },\n];\n","import React, { useRef, RefObject } from 'react';\nimport ControlsMenu from './ControlMenu';\nimport { CreateMenuCollection, OptionsMenuCollection } from './constants';\n\nexport default function Controls() {\n  const optionsRef = useRef<HTMLDivElement>(null);\n  const createRef = useRef<HTMLDivElement>(null);\n  const refs: { [key: string]: RefObject<HTMLDivElement> } = {\n    options: optionsRef,\n    create: createRef,\n  };\n  const onClickHandler = (btnName: string) => {\n    console.log('button clicked');\n    for (const name in refs) {\n      const curRef = refs[name];\n      if (curRef.current && name === btnName) {\n        curRef.current.classList.remove('hidden');\n      } else if (curRef.current) {\n        curRef.current.classList.add('hidden');\n      }\n    }\n  };\n  return (\n    <div className=\"sidenav__controls\">\n      <ControlsMenu\n        menuRef={optionsRef}\n        tipPosition=\"left\"\n        name=\"options\"\n        menuItems={OptionsMenuCollection}\n      />\n      <ControlsMenu\n        menuRef={createRef}\n        tipPosition=\"right\"\n        hidden={true}\n        name=\"create\"\n        menuItems={CreateMenuCollection}\n      />\n      <div className=\"btn-group\">\n        <button\n          className=\"options-btn\"\n          onClick={() => onClickHandler('options')}\n        >\n          <div className=\"btn-text\">Options</div>\n        </button>\n        <button className=\"create-btn\" onClick={() => onClickHandler('create')}>\n          <svg className=\"nav-item__icon\">\n            <use\n              href={process.env.PUBLIC_URL + '/img/sprites.svg#icon-plus'}\n            ></use>\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport NavLinks from './NavLinks';\nimport Logo from './Logo';\nimport Controls from './Controls';\nimport { NavItemDataCollection } from './constants';\n\nfunction SideNav() {\n  return (\n    <nav className=\"sidenav\">\n      <Logo />\n      <NavLinks items={NavItemDataCollection} />\n      <Controls />\n    </nav>\n  );\n}\n\nexport default SideNav;\n","import React from 'react';\n\nfunction RightPanel() {\n  return (\n    <div className=\"right-panel\">\n      <h1>Right Panel</h1>\n    </div>\n  );\n}\nexport default RightPanel;\n","import React from 'react';\nimport Dashboard from './Dashboard/Dashboard';\nimport SideNav from './SideNav/SideNav';\nimport RightPanel from './RightPanel/RightPanel';\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\n\nfunction Main() {\n  return (\n    <Router>\n      <div className=\"main-container\">\n        <SideNav />\n        <Dashboard />\n        <RightPanel />\n        <Switch>\n          <Redirect from=\"/\" to=\"/home\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nexport default Main;\n","import React from 'react';\nimport './App.scss';\nimport Main from './components/Main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-lato';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}